Random Restart Hill Climbing Algorithm
Here we used Random Restart Hill Climbing. It continually explores the solution space and if it fails to find a solution, starts the same from the beginning with a randomly generated combination of queens. This is done continually, until the solution is found.
row_collisions: row_collisions function goes through the chessboard and as a result gives the number of row collisions (number of queens attacking each other in each row)
col_collisions: Like the previous function, col_collisions gives the number of column collisions
evaluate: Calculating total number of collisions based on col_collisions and row_collisions
generate_candidates: This function is given the current state and return all candidate states that are possible arrangements from the current one.
generate_state: generate_state creates random new state (arrangements of queens) for n size n-queens problem.
is_solution: The function checks whether our state is a solution or not with the help of an evaluation function. When evaluation function’s result = 0, that means that there are no queens attacking each other, hence we reached a solution
n_queens_best_first_hill_climbing: This function uses all the above functions and solves the n_queens problem. With the help of hill climbing it tries to find an optimal solution by reducing the number of collisions on the chessboard.
solve_n_queens: solve_n_queens function uses Random Restart Hill Climbing and returns the counted number of random restarts and our final solution.